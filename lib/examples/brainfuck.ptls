output = readLines |> join("") |> clean |> interpret |> println

clean(code) =
  filter(valid, toList(code)) where valid(c) = c in toSet("<>+-.[]")

interpret(insns) =
  head(dropWhile(running, iterate(realinterpret, state))).output where {
    running(s) = s.ip < length(s.ops)
    state = {
      ip = 0; dp = 0; ops = insns
      jumps = precompute(insns, 0, [], {})
      tape = toArray(take(100, repeat(0)))
      output = ""
    }
  }

realinterpret(s) =
  execute(cmd, s) where cmd = at(s.ip, s.ops)

precompute(insns, i, stack, map) = switch {
  case insns is Empty map
  case head(insns) == "[" next([i] ++ stack, map)
  case head(insns) == "]" next(tail(stack), map with {
    $[i] = head(stack)
    $[head(stack)] = i
  })
  otherwise next(stack, map)
} where next = precompute(tail(insns), i + 1)

execute(op, s) =
  opmap[op](s) with $.ip += 1 where opmap = {
    "<": left, ">": right, "+": plus, "-": minus,
    "[": loop, "]": jump, ".": out
  }

left(s)  = s with $.dp -= 1
right(s) = s with $.dp += 1
plus(s)  = s with $.tape[s.dp] += 1
minus(s) = s with $.tape[s.dp] -= 1
out(s)   = s with $.output += chr(s.tape[s.dp])
loop(s)  = if s.tape[s.dp] == 0 then s with $.ip = s.jumps[s.ip] else s
jump(s)  = if s.tape[s.dp] != 0 then s with $.ip = s.jumps[s.ip] else s

ascii = "         \t\n                      !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
chr(ord) = at(ord - 32, toList(ascii))
