
-------------------------------------------------------------------------------
-- get the string rep of a value, keeping quotes if value is a string

repr(value) =
  if value is PtlsString
  then "\"" + value + "\""
  else show(value) 

-------------------------------------------------------------------------------
-- get the string representation of a value

show(value) = switch {
  case value is PtlsNumber  getString(value)
  case value is PtlsString  getString(value)
  case value is PtlsBool    getString(value)
  case value is PtlsLabel   getString(value)
  case value is PtlsSet     showSet(value)
  case value is PtlsMap     showMap(value)
  case value is PtlsList    showList(value)
  case value is PtlsArray   showArray(value)
  case value is PtlsObject  showObject(value)
  case value is PtlsTuple   showTuple(value)
  case value is PtlsFunc    "PtlsFunc"
  case value is PtlsBuiltIn "PtlsBuiltIn"
}

-------------------------------------------------------------------------------

getString(value) = value.!getString

-------------------------------------------------------------------------------

getLabel(value) = value.!getLabel

getLabelStr (value) =
  if getLabel(value) is PtlsTuple then "" else show(getLabel(value))

-------------------------------------------------------------------------------

showElems(start, end, sep, container) =
  start + elemStr + end
  where elemStr = container |> map(repr) |> join(sep)

-------------------------------------------------------------------------------

showSet   = showElems("{", "}", ", ")
showList  = showElems("[", "]", ", ")
showArray = showElems("[", "]", " ")

-------------------------------------------------------------------------------

showTuple(tuple) = 
  getLabelStr(tuple) + showElems("(", ")", ", ", tuple)

-------------------------------------------------------------------------------

showMap = showPairs(repr, format("{}: {}"), ", ")

-------------------------------------------------------------------------------

showObject(object) =
  object
  |> toMap
  |> showPairs(show, format("{} = {}"), "; ")

-------------------------------------------------------------------------------

showPairs(keyFunc, pairFmt, sep, mapVal) = "{" + pairStr + "}"
  where pairStr =
    mapVal
    |> items
    |> map(reprPair(keyFunc))
    |> map(pairFmt)
    |> join(sep)

-------------------------------------------------------------------------------

reprPair(keyFunc, pair) = (keyFunc(a), repr(b)) where (a, b) = pair
