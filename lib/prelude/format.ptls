
-------------------------------------------------------------------------------
-- example:
--
-- ptls> format("{} {}!", ["Hello", "world"])
-- "Hello world!"
-- 
-- example:
--
-- ptls> pairs  = [("dolor", 5), ("sit", 3), ("amet", 4)]
-- ptls> pairs |> map(format("[{<5} {}]")) |> join("\n")
-- [dolor 5]
-- [sit   3]
-- [amet  4]

format(fmtString, values) =
  formatList(toList(fmtString), valsList)
  where valsList =
    if values is PtlsTuple
    then toList(values)
    else values requires values is PtlsList
  
-------------------------------------------------------------------------------

formatList(fmt, values) = switch {
  -- return remaining format chars without value substitutions
  case values is Empty join("", fmt)

  -- lead contains the rest of the format string if there's no new pattern
  -- convert from char list back to string
  case pat is Empty join("", lead)

  otherwise join("", lead) + pattStr + formatList(rest, tail(values))
    where pattStr = processPattern(pat, head(values))

  } where (lead, pat, rest) = nextPat(fmt)

-------------------------------------------------------------------------------
--           trailing
-- leading pattern rest
-- ....... {.....} ....

spanUntil(func, list) = (takeUntil(func, list), dropUntil(func, list))

nextPat(fmt) = (leading, pattern, rest) where {
  (leading, trailing) = span(notEq("{"), fmt)
  (pattern, rest) = spanUntil(equals("}"), trailing)
}

-------------------------------------------------------------------------------

processPattern(pat, value) = switch {
  case at(1, pat) == ">"
    show(value) |> padLeft(getPadding(pat))

  case at(1, pat) == "<"
    show(value) |> padRight(getPadding(pat))

  otherwise show(value)
}

-------------------------------------------------------------------------------

getPadding(pat) =
  pat
  |> slice(2, -1)
  |> join("")
  |> toInt
