
-------------------------------------------------------------------------------
-- map a collection to strings, and join with a seperator string

join(sep, collection) =
  collection
  |> map(show)
  |> intersperse(sep)
  |> concatStrings("")

concatStrings(result, strings) =
  if strings is Empty
  then result
  else concatStrings(result + head(strings), tail(strings))

-------------------------------------------------------------------------------
-- return the list of substrings of a string, split by a delimiter

split(delimStr, string) =
  if delimStr == ""
    then toList(string)

  else splitChars(delim, chars) where {
    delim = toList(delimStr)
    chars = toList(string)
  }

splitChars(delim, chars) =
  if chars is Empty
    then []

  else if rest is None
    then [join("", chars)]

  else [join("", startChars)] ++ splitChars(delim, endChars)

  where {
    rest       = find(hasPrefix(delim), suffixes(chars))
    startLen   = length(chars) - length(rest)
    endChars   = drop(length(delim), rest)
    startChars = take(startLen, chars)
  }

-------------------------------------------------------------------------------
-- left-pad a string with spaces to make its length >= n

padLeft(n, string) = getPad(n, string) + string

getPad(n, string) =
  repeat(" ")
  |> take(n - length(string))
  |> join("")

-------------------------------------------------------------------------------
-- right-pad a string with spaces to make its length >= n

padRight(n, string) = string + getPad(n, string)

-------------------------------------------------------------------------------

startsWith(prefix, string) =
  split("", string)
  |> take(length(prefix))
  |> join("") == prefix
