
-------------------------------------------------------------------------------
-- get the first element in a list

head(list) = list.!getHead requires list is PtlsList

-------------------------------------------------------------------------------
-- get all elements in a list after the first

tail(list) = list.!getTail requires list is PtlsList

-------------------------------------------------------------------------------
-- returns the nth element in a list (list must have at least n elements)

at(n, list) = list |> drop(n) |> head

------------------------------------------------------------------------------
-- get a sublist of indices [start ... (end - 1)]

slice(start, end, list) =
  slicePos(start, posEnd, list)
  where
    posEnd = if end > 0 then end else length(list) + end

slicePos(start, end, list) =
  list
  |> drop(start)
  |> take(end - start)

-------------------------------------------------------------------------------
-- lazily concatenate a list of lists into a single list

concat(lists) = 
  if lists is Empty then []
  else concatHelper(head(lists), tail(lists))

concatHelper(list, lists) =
  if list is Empty then concat(lists)
  else [head(list)] ++ concat([tail(list)] ++ lists)

-------------------------------------------------------------------------------
-- map a list-generating function over a list and concatenate output lists

concatMap(func, lists) = lists |> map(func) |> concat

-------------------------------------------------------------------------------
-- make a new list with sep element interted between each pervious element

intersperse(sep, list) =
  if list is Empty then []
  else [head(list)] ++ prependToAll(sep, tail(list))

prependToAll(sep, list) =
  if list is Empty then []
  else [sep, head(list)] ++ prependToAll(sep, tail(list))

-------------------------------------------------------------------------------
-- make an infinite list of a value, repeated

repeat(elem) = [elem] ++ repeat(elem)

-------------------------------------------------------------------------------
-- get the first n elements in an list, or the whole list of length < n

take(n, list) = 
  if n < 1 then []
  else if list is Empty then []
  else [head(list)] ++ take(n - 1, tail(list))

-------------------------------------------------------------------------------
-- get the elements after the first n elements in an list
-- or empty if length < n

drop(n, list) = 
  if n < 1 then list
  else if list is Empty then []
  else drop(n - 1, tail(list))

-------------------------------------------------------------------------------
-- take from a list the leading elements for which func returns true

takeWhile(func, list) =
  if list is Empty then []

  else if func(head(list))
    then [head(list)] ++ takeWhile(func, tail(list))

  else []

-------------------------------------------------------------------------------
-- take the leading elements for which func returns true
-- and the first element for which func returns false

takeUntil(func, list) =
  if list is Empty then []

  else if func(head(list))
    then [head(list)]

  else [head(list)] ++ takeUntil(func, tail(list))

-------------------------------------------------------------------------------
-- drop the leading elements for which func returns true

dropWhile(func, list) =
  drop(length(takeWhile(func, list)), list)

-------------------------------------------------------------------------------
-- drop the leading elements for which func returns true
-- and the first element for which func returns false

dropUntil(func, list) =
  drop(length(takeUntil(func, list)), list)

-------------------------------------------------------------------------------
-- find the first element for which func return true, or None if none exists 

find(func, list) =
  if list is Empty then None

  else if func(head(list))
    then head(list)

  else find(func, tail(list))

-------------------------------------------------------------------------------
-- span(...) = (takewhile(...), dropWhile(...)) 

span(func, list) = (head, tail)
  where {
    head = takeWhile(func, list)
    tail = dropWhile(func, list)
  }

-------------------------------------------------------------------------------
-- return the list of subsequences of consecutive elements
-- for which func(a, b) == true

groupBy(func, list) =
  if list is Empty then []
  else [groupList] ++ groupBy(func, spanTail)
  where {
    groupList = [[head(list)]] ++ spanHead
    (spanHead, spanTail) = tail(list) |> span(func(head(list)))
  }

-------------------------------------------------------------------------------
-- return all suffixes of a list, from longest to smallest

suffixes(list) =
  if list is Empty then []
  else [list] ++ suffixes(tail(list))

-------------------------------------------------------------------------------
-- apply a function to each element in a list, and make a list of the results

map(func, collection) = toList(collection) |> mapList(func)

mapList(func, list) =
  if list is Empty then []
  else [func(head(list))] ++ mapList(func, tail(list))

-------------------------------------------------------------------------------
-- apply a test function to each element, make new list of passing elements

filter(func, list) =
  if list is Empty then []

  else if func(head(list))
    then [head(list)] ++ filter(func, tail(list))

  else filter(func, tail(list))

-------------------------------------------------------------------------------
-- starting with accumulator value acc, update acc <- func(acc, elem)
-- for each element elem in the list
--
-- example: sum(list) = reduce(list, 0, add)

reduce(func, acc, list) = 
  if list is Empty then acc 
  else reduce(func, func(acc, head(list)), tail(list))

-------------------------------------------------------------------------------

scan(func, acc, list) = 
  if list is Empty then [] 
  else [acc] ++ scan(func, func(acc, head(list)), tail(list))

-------------------------------------------------------------------------------
-- reduce a non-empty list with first element set as accumulator

reduceFirst(func, list) = reduce(func, head(list), tail(list))

-------------------------------------------------------------------------------
-- get reverse of list

reverse(list) = reverseAcc([], list)

reverseAcc(acc, list) =
  if list is Empty then acc
  else reverseAcc([head(list)] ++ acc, tail(list))

-------------------------------------------------------------------------------
-- for lists [a0, a1, a2, ...], [b0, b1, b2, ...], return the list
-- [(a0, b0), (a1, b1), (a2, b2) ...], with length limited by the length
-- of the shorter input list

zip(a, b) = switch {
  case a is Empty []
  case b is Empty []
  otherwise [pair] ++ zip(tail(a), tail(b))
  where pair = (head(a), head(b))
}

-------------------------------------------------------------------------------
-- convert a collection (a list, array, set, or tuple) to a list

toList(collection) =
  if collection is Empty then []
  else collection.!getList

toListStrict(collection) = toList(collection)

-------------------------------------------------------------------------------

toArray(collection) =
  PtlsArray.!getZeros(length(collection))
  |> insert(0, toList(collection))

insert(index, list, array) =
  if list is Empty then array
  else insert(index + 1, tail(list), newArray)
  where newArray = array with $[index] = head(list)

-------------------------------------------------------------------------------

toSet(collection) = toSetHelper(Empty.!getSet, toList(collection))

toSetHelper(set, list) =
  if list is Empty then set
  else toSetHelper(newSet, tail(list))
  where newSet = set.!getAddElem(head(list))

-------------------------------------------------------------------------------

toMap(object) = object.!getMap

-------------------------------------------------------------------------------

keys(mapVal) = mapVal.!getKeys

-------------------------------------------------------------------------------

vals(mapVal) = mapVal.!getVals

-------------------------------------------------------------------------------

items(mapVal) = keys(mapVal) |> map(key => (key, mapVal[key])) 

-------------------------------------------------------------------------------

toNDArray(dims, elems) = head(wrappedArray)
  requires reduceFirst(mul, dimsList) == length(elems)
  where {
    dimsList = toList(dims)
    wrappedArray = toNDHelper(dimsList, elems, length(dims))
  }

toNDHelper(dimsList, elems, depth) =
  if depth == 0 then elems
  else chunks(head(dimsList), subArrays)
  where {
    subArrays = toNDHelper(tail(dimsList), elems, depth - 1)
  }

-------------------------------------------------------------------------------

chunks(n, list) =
  if list is Empty then []
  else [toArray(take(n, list))] ++ tailChunks
  where tailChunks = chunks(n, drop(n, list))

-------------------------------------------------------------------------------
-- get the length of a collection

length(collection) = switch {
  case collection is Empty 0
  case collection is PtlsList lengthList(collection)
  otherwise collection.!getLength
}

lengthList(list) =
  list
  |> map(const(1))
  |> sum

-------------------------------------------------------------------------------
-- return true if toList(collection) starts with the given prefix of elements

hasPrefix(prefix, collection) =
  hasPrefixList(toList(prefix), toList(collection))

hasPrefixList(prefix, list) =
  if prefix is Empty then true
  else if list is Empty then false
  else matchHead and matchTail
  where {
    matchHead = head(list) == head(prefix)
    matchTail = hasPrefixList(tail(prefix), tail(list))
  }

-------------------------------------------------------------------------------
-- for a list [a, b, c, ...] return [(0, a), (1, b), (2, c) ...]

enumerate(list) =
  list |> zip(nats) where nats = iterate(add(1), 0)

-------------------------------------------------------------------------------
-- sort a list of numbers

sort(collection) = sortList(toList(collection))

sortList(list) = switch {
  case (list is Empty)     []
  case (length(list) == 1) list
  otherwise merge(left, right)
  where {
    half  = round(length(list) / 2)
    left  = sortList(take(half, list))
    right = sortList(drop(half, list))
  }
}

merge(a, b) = switch {
  case a is Empty b
  case b is Empty a
  case head(a) <= head(b)
    [head(a)] ++ merge(tail(a), b)
  otherwise
    [head(b)] ++ merge(a, tail(b))
}
