
-------------------------------------------------------------------------------
-- preform deep equality check on two data structure

equals(a, b) = switch {
  case a == b true
  case a is PtlsSet     b is PtlsSet and equalsSet(a, b)
  case a is PtlsMap     b is PtlsMap and equalsMap(a, b)
  case a is PtlsList    b is PtlsList and equalsList(a, b)
  case a is PtlsArray   b is PtlsArray and equalsArray(a, b)
  case a is PtlsObject  b is PtlsObject and equalsObject(a, b)
  case a is PtlsTuple   b is PtlsTuple and equalsTuple(a, b)
}

-------------------------------------------------------------------------------

-- notEquals(a, b) = not equals(a, b)

notEquals(a, b) = not equals(a, b)

-------------------------------------------------------------------------------

equalsSet(a, b) =
  length(a) == length(b) and length(a) == length(union(a, b))

-------------------------------------------------------------------------------

equalsMap(a, b) =
  equalsSet(toSet(keys(a)), toSet(keys(b)))
  and all(for key in keys(a) yield equals(a[key], b[key]))

-------------------------------------------------------------------------------

equalsList(a, b) =
  if a is Empty then b is Empty
  else equals(head(a), head(b)) and equalsList(tail(a), tail(b))

-------------------------------------------------------------------------------

equalsArray(a, b) =
  length(a) == length(b)
  and all(for i in range(length(a)) yield equals(a[i], b[i]))

-------------------------------------------------------------------------------

equalsObject(a, b) = equalsMap(toMap(a), toMap(b))

-------------------------------------------------------------------------------

equalsTuple(a, b) =
  getLabel(a) == getLabel(b)
  and equalsArray(toArray(a), toArray(b))
