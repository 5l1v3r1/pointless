
// use switch to get string instead of enum to index
// into string array for better type-safety
case Tok_NULL:        return "NULL";
case Tok_Add:         return "Add";
case Tok_AddAssign:   return "AddAssign";
case Tok_And:         return "And";
case Tok_As:          return "As";
case Tok_Assign:      return "Assign";
case Tok_Blank:       return "Blank";
case Tok_Bool:        return "Bool";
case Tok_Case:        return "Case";
case Tok_Colon:       return "Colon";
case Tok_Comma:       return "Comma";
case Tok_Comment:     return "Comment";
case Tok_Concat:      return "Concat";
case Tok_Div:         return "Div";
case Tok_DivAssign:   return "DivAssign";
case Tok_Dollar:      return "Dollar";
case Tok_Else:        return "Else";
case Tok_EOF:         return "EOF";
case Tok_Equals:      return "Equals";
case Tok_Field:       return "Field";
case Tok_For:         return "For";
case Tok_GreaterEq:   return "GreaterEq";
case Tok_GreaterThan: return "GreaterThan";
case Tok_If:          return "If";
case Tok_Import:      return "Import";
case Tok_In:          return "In";
case Tok_Is:          return "Is";
case Tok_Label:       return "Label";
case Tok_Lambda:      return "Lambda";
case Tok_LArray:      return "LArray";
case Tok_LBracket:    return "LBracket";
case Tok_LessEq:      return "LessEq";
case Tok_LessThan:    return "LessThan";
case Tok_LParen:      return "LParen";
case Tok_Mod:         return "Mod";
case Tok_ModAssign:   return "ModAssign";
case Tok_Mul:         return "Mul";
case Tok_MulAssign:   return "MulAssign";
case Tok_Name:        return "Name";
case Tok_Neg:         return "Neg";
case Tok_Newline:     return "Newline";
case Tok_Not:         return "Not";
case Tok_NotEq:       return "NotEq";
case Tok_Number:      return "Number";
case Tok_Or:          return "Or";
case Tok_Otherwise:   return "Otherwise";
case Tok_Pipe:        return "Pipe";
case Tok_Pow:         return "Pow";
case Tok_PowAssign:   return "PowAssign";
case Tok_RArray:      return "RArray";
case Tok_RBracket:    return "RBracket";
case Tok_Requires:    return "Requires";
case Tok_RParen:      return "RParen";
case Tok_Semicolon:   return "Semicolon";
case Tok_String:      return "String";
case Tok_Sub:         return "Sub";
case Tok_SubAssign:   return "SubAssign";
case Tok_Switch:      return "Switch";
case Tok_Then:        return "Then";
case Tok_When:        return "When";
case Tok_Where:       return "Where";
case Tok_Whitespace:  return "Whitespace";
case Tok_With:        return "With";
case Tok_Yield:       return "Yield";
