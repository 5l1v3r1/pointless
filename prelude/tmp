
-- Convert a collection (a list, array, set, or tuple) to an array

toArray(collection) 

-- Make an N-dimensional array from the values in a list

toNDArray(dims, elems) 

-- lessEq(b, a) = a <= b

lessEq(b, a) 

-- lessThan(b, a) = a < b

lessThan(b, a) 

-- greaterEq(b, a) = a >= b

greaterEq(b, a) 

-- greaterThan(b, a) = a > b

greaterThan(b, a) 

-- notFunc(x) = not x

notFunc(x) 

-- notEq(a, b) = a != b

notEq(a, b) 

-- eq(a, b) = a == b

eq(a, b) 

-- orFunc(a, b) = a or b

orFunc(a, b) 

-- andFunc(a, b) = a and b

andFunc(a, b) 

-- inFunc(b, a) = a in b

inFunc(b, a) 

-- Takes a list of boolean values, returns true if any list value is true

any(values) 

-- Takes a list of boolean values, returns true if all list values are true

all(values) 

-- lowers = toSet("abcdefghijklmnopqrstuvwxyz")

lowers 

-- uppers = toSet("ABCDEFGHIJKLMNOPQRSTUVWXYZ")

uppers 

-- Set of uppercase and lowercase letters

alphas 

-- digits = toSet("0123456789")

digits 

-- Set of uppercase and lowercase letters and digits 0 through 9

alNums 

-- preform deep equality check on two data structure

deepEq(a, b) 

-- Remove an entry from a dict

delKey(dict, key) 

-- Convert an object to a dict of strings (field names) to values (field values)

toDict(object) 

-- Get a list of the keys in a dict

keys(dict) 

-- Get a list of the values in a dict

vals(dict) 

-- Get (key, value) tuples for each entry in a dict

items(dict) 

-- Get value for a given key if present in dict, otherwise default

getDefault(dict, default, key) 
-- Throw AssertionError(message) if condition is not true

assert(condition, message) 

-- Use a format pattern to build a string with inserted values
--
-- example:
--
-- >> format("{} {}!", ["Hello", "world"])
-- "Hello world!"
-- 
-- example:
--
-- >> pairs  

-- compose(a, b) = x => b(a(x))

compose(a, b) 

-- id(a) = a

id(a) 

-- const(a, b) = a
--
-- example: length(list) 

-- Get an infinte list [init, func(init), func(func(init)) ...]

iterate(func, init) 
-- Generate command sequence to print the string rep for value

print(value) 
-- Generate command sequence to print value with a newline

println(value) 
-- Print each element in a sequence on a separate line

printLines(iter) 
-- Generate command sequence to clear console and print value with newline

printFrame(value) 
-- Print each element in a sequence in a separate frame

printFrames 
-- An identity function which logs its argument
-- Useful for debugging

debug(value) 
-- Read lines of input lazily

readLines 

-- getIndex(lhs, rhs) = lhs[rhs]

getIndex(lhs, rhs) 

-- Get the number of elements in a list, set, dict, array, or tuple

length(iter) 

-- Get the cartesian product of a list of iterables

product(iters) 

-- Returns the nth element in a tuple, array, or list
-- (must have at least n elements)

at(n, iter) 

-- Get the label of a labelled tuple or object, or a label

-- need hasType instead of is to avoid infinite recursion

getLabel(value) 

-- Does a labelled tuple or object have the given labelled

hasLabel(label, value) 

-- Get the single value in a single-value tuple

unwrap(wrapped) 

-- Get a single-value tuple with the given label containing value
-- Foo(123) is syntactic sugar for wrap(Foo, 123) 

wrap(label, value) 

-- Given a tuple, return the tuple labelled with label
-- Foo(1, 2, 3) is syntactic sugar for wrapTuple(Foo, (1, 2, 3)) 

wrapTuple(label, tuple) 

-- Given an object, return the object labelled with label
-- Foo {value 

-- Get the first element in a list

head(list) 

-- Get all elements in a list after the first

tail(list) 
-- Get the last element in a non-empty list

last(list) 
-- Get a sublist of indices [start ... (end - 1)]

slice(start, end, list) 

-- Lazily concatenate a list of lists into a single list

concat(lists) 

-- Map a list-generating function over a list and concatenate output lists

concatMap(func, lists) 

-- Make a new list with sep element interted between each pervious element

intersperse(sep, list) 

-- Make an infinite list of a value, repeated

repeat(elem) 

-- Get the first n elements in an list, or the whole list of length < n

take(n, list) 

-- Get the elems after the first n elems in an list or empty if length < n

drop(n, list) 

-- Take from a list the leading elements for which func returns true

takeWhile(func, list) 

-- Take elements up to (including) the first for which func returns true

takeUntil(func, list) 

-- Drop the leading elements for which func returns true

dropWhile(func, list) 

-- Drop elements up to (including) the first for which func returns true

dropUntil(func, list) 

-- Find the first element for which func return true, or None if none exists 

find(func, list) 

-- span(...) = (takewhile(...), dropWhile(...)) 

span(func, list) 

-- Return the list of lists of consecutive values for which func(a, b) == true

groupBy(func, list) 

-- Get the reverse of list

reverse(list) 

-- From two lists, get a list of tuple pairs of elems from each list in order 
--
-- For lists [a0, a1, a2, ...], [b0, b1, b2, ...], return the list
-- [(a0, b0), (a1, b1), (a2, b2) ...], with length limited by the length
-- of the shorter input list

-- alternively
-- zip(a, b) 

-- Like zip, but for an arbitrary number of input lists

zipN(lists) 

-- Evaluate each value in a list
-- Useful for catching errors early

eager(list) 

-- isEmpty(list) = list == Empty

isEmpty(list) 

-- Convert iter (a list, array, set, or tuple) to a list

toList(iter) 

-- For a list [a, b, c, ...] return [(0, a), (1, b), (2, c), ...]

enumerate(list) 

-- Return true if list starts with the given prefix of elements

hasPrefix(prefix, list) 

-- Apply a function to each list element, make a list of the results

map(func, list) 

-- Apply a test to each list element, make new list of passing elements

filter(func, list) 

-- Get a single value given a list, starting value, and accumulator function
--
-- Starting with accumulator value acc, update acc <- func(acc, elem)
-- for each element elem in the list
--
-- example: sum(list) 

-- Reduce a non-empty list with first element set as accumulator

reduceFirst(func, list) 

-- Reduce a list with a given function and accumulator, returning a list of
-- the intermediate accumulator values, including the initial value

scan(func, acc, list) 
-- Get the sum of a list of numbers

sum(list) 
-- Get a list of numbers:
--   [a, a + 1, a + 2, ... b] if a < b
--   [a, a - 1, a - 2, ... b] if a > b
--   [a]                      if a 
-- Convert a number or a string to a float

toFloat(val) 
-- Convert a number or a string to an integer (truncates floats)

toInt(val) 
-- Round number down

floor(n) 
-- Round number up

ceil(n) 
-- Round a number to the nearest int value

round(n) 
-- https://en.wikipedia.org/wiki/Atan2#Definition_and_computation

atan2(y, x) 
-- pi, to as many digits as I could remember

pi 
-- e, to as many digits as I could remember

euler 
-- Get the absolute-value of a number 

abs(n) 
-- pow(b, a) = a ** b

pow(b, a) 
-- mul(b, a) = a * b

mul(b, a) 
-- div(b, a) = a / b

div(b, a) 
-- mod(b, a) = a % b

mod(b, a) 
-- add(b, a) = b + a

add(b, a) 
-- sub(b, a) = b - a

sub(b, a) 
-- Get the larger of two numbers

max(a, b) 
-- Get the smaller of two numbers

min(a, b) 
-- Get the smallest number in a non-empty collection

minimum(values) 
-- Get the largest number in a non-empty collection

maximum(values) 
-- Get random float in 0 <= result <= n

randFloat(n) 
-- Get random entry from range(a, b)

randRange(a, b) 
-- Get random elem from collection

randChoice(elems) 

-- Shuffle an iterable of values
-- https://www.rosettacode.org/wiki/Knuth_shuffle

shuffle(iter) 

-- Convert a collection (a list, array, set, or tuple) to a set

toSet(collection) 

-- Add an element to a set

addElem(set, elem) 

-- Remove an element from a set

delElem(set, elem) 

-- Get the union of two sets

union(a, b) 

-- Get the intersection of two sets

intersection(a, b) 

-- Get the difference of two sets

difference(a, b) 

-- Get the symmetric difference of two sets

symDifference(a, b) 

-- Get the string rep of a value, keeping quotes if value is a string

repr(value) 

-- Get the string representation of a value

show(value) 

-- Sort an iterable of numbers

sort(iter) 

-- Convert a value to a string (works for number, bool, string, and label)

toString(value) 

-- Map a iterabel to strings, and join with a seperator string

join(sep, iter) 

-- Return the list of substrings of a string, split by a delimiter

split(delimStr, string) 

-- Left-pad a string with spaces to make its length >= n

padLeft(n, string) 

-- Right-pad a string with spaces to make its length >= n

padRight(n, string) 

-- Convert an iterable to a tuple

toTuple(iter) 

-- Get a label representing the type of a value

getType(value) 

-- Does value have the type given by label

hasType(label, value) 

-- Does value have the type given by label or is value a labelled tuple

is(label, value) 
